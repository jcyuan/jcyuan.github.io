<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="origin-trial" content="As1x8LqFb1NcSw08ER4rmHpM00c99gFhYn35YQgC6o/M+4rz2xVrd6j8vtYGSzBLrvTVYaSv+ia3Yzpr35xnkQgAAABfeyJvcmlnaW4iOiJodHRwczovL2pjLXNwYWNlLmNvbTo0NDMiLCJmZWF0dXJlIjoiV2ViR1BVIiwiZXhwaXJ5IjoxNjQzMTU1MTk5LCJpc1N1YmRvbWFpbiI6dHJ1ZX0=">
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebGPU</title>
    <style>
        body { background-color: #303030; color: #fefefe; }
    </style>
</head>
<body>
<h2>WebGPU</h2>
<div id="warning"></div>
<div id="result"></div>
<script>
const availVersion = [94, 0, 4606, 81];

let warnDiv;
window.onload = () => {
    warnDiv = document.getElementById("warning");

    const detectRet = detectVersion();
    if (detectRet) {
        warnDiv.innerText = "Browser not match: " + detectRet;
    } else {
        const retDiv = document.getElementById("result");
        beginGPUWeb(retDiv);
    }
};

function detectVersion() {
    let v = navigator.appVersion || "";
    v = v.match(/\sChrome\/([\d\.]+?)\s/);
    if (!v || v.length < 2)
        return "chrome needed (version >= " + availVersion.join('.') + ")";

    v = v[1].split('.');
    if (v.length !== availVersion.length)
        return "chrome version not match";

    v.forEach((n, i) => {
        v[i] = parseInt(n, 10);
    });

    if (v[0] < availVersion[0]
        || (v[0] >= availVersion[0] && parseInt(v[1], 10) < availVersion[1])
        || (v[0] >= availVersion[0] && parseInt(v[1], 10) >= availVersion[1] && parseInt(v[2], 10) < availVersion[2])
        || (v[0] >= availVersion[0] && parseInt(v[1], 10) >= availVersion[1] && parseInt(v[2], 10) >= availVersion[2] && parseInt(v[3], 10) < availVersion[3]))
    {
        return "chrome version not up to date, please update to newest version which is greater then " + availVersion.join('.');
    }

    return null;
}

const beginGPUWeb = (function() {
    let device;

    return async function (retDiv) {
        const adapter = await navigator.gpu.requestAdapter();
        device = await adapter.requestDevice();

        const info = ["Features: "];
        device.features.forEach(f => {
            info.push(f);
        })
        
        info.push("");
        info.push("Limits: ");
        for (const key in device.limits)
            info.push(key + ": " + device.limits[key]);
    };

})();
</script>
</body>
</html>
